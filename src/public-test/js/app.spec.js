// Generated by CoffeeScript 1.9.1
(function() {
  describe('LazerMaze', function() {
    var $document;
    $document = null;
    beforeEach(function() {
      return module('laserMaze');
    });
    describe("BoardController", function() {
      var $scope, controller;
      $scope = controller = null;
      beforeEach(inject(function(_$controller_) {
        $scope = {};
        return controller = _$controller_('boardController', {
          $scope: $scope
        });
      }));
      describe('$scope.player', function() {
        it("exits", function() {
          return expect($scope.player).toBeTruthy();
        });
        it("has position", function() {
          return expect($scope.player.pos).toBeTruthy();
        });
        it("has name", function() {
          return expect($scope.player.name).toBeTruthy();
        });
        describe("can move", function() {
          var x, y;
          y = x = null;
          beforeEach(function() {
            y = $scope.player.pos.y;
            return x = $scope.player.pos.x;
          });
          it("up", function() {
            $scope.player.move("up");
            return expect($scope.player.pos.y).toBe(y - 1);
          });
          it("left", function() {
            $scope.player.move("left");
            return expect($scope.player.pos.x).toBe(x - 1);
          });
          it("down", function() {
            $scope.player.move("down");
            return expect($scope.player.pos.y).toBe(y + 1);
          });
          it("left", function() {
            $scope.player.move("right");
            return expect($scope.player.pos.x).toBe(x + 1);
          });
          return it("invalid", function() {
            return expect(function() {
              return $scope.player.move("nothing");
            }).toThrow();
          });
        });
        return describe("capture", function() {
          it("valid key", function() {
            var i, j, results;
            results = [];
            for (i = j = 37; j <= 40; i = ++j) {
              results.push(expect($scope.keyPressed({
                which: i
              })).toBeTruthy());
            }
            return results;
          });
          return it("invalid key", function() {
            var i, j, len, ref, results;
            ref = [0, 25, 100, 234];
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              i = ref[j];
              results.push(expect($scope.keyPressed({
                which: i
              })).toBeFalsy());
            }
            return results;
          });
        });
      });
      return describe("$scope.board", function() {
        it("exits", function() {
          return expect($scope.board).toBeTruthy();
        });
        return it("is not empty", function() {
          return expect($scope.board.length).toBeGreaterThan(0);
        });
      });
    });
    return describe("shortcutDirective", function() {
      var $compile, $rootScope;
      $compile = $rootScope = $document = null;
      beforeEach(inject(function(_$compile_, _$rootScope_, _$document_) {
        $compile = _$compile_;
        $rootScope = _$rootScope_;
        return $document = _$document_;
      }));
      it('is attached', function() {
        spyOn($document, 'on');
        $compile("<div shortcut><div>")($rootScope);
        return expect($document.on).toHaveBeenCalledWith('keydown', jasmine.any(Function));
      });
      return it('call keyPressed', function() {
        $document.on = function(type, fn) {
          return fn();
        };
        $rootScope.keyPressed = function() {};
        spyOn($rootScope, 'keyPressed');
        $compile("<div shortcut><div>")($rootScope);
        return expect($rootScope.keyPressed).toHaveBeenCalled();
      });
    });
  });

}).call(this);

//# sourceMappingURL=app.spec.js.map
