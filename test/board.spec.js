// Generated by CoffeeScript 1.9.1
(function() {
  var board;

  board = require("../src/board");

  describe("board ", function() {
    var game;
    game = 0;
    beforeEach(function() {
      return game = new board.Game(9);
    });
    it("construction", function() {
      return expect(game.getSize()).toBe(9);
    });
    describe("player", function() {
      var player;
      player = 0;
      beforeEach(function() {
        return player = {
          pos: {
            x: 3,
            y: 3
          },
          name: 'alonso'
        };
      });
      it("is save", function() {
        var players;
        game.addPlayer(player);
        players = game.getPlayers();
        return expect(players.length).toBe(1);
      });
      it("is accessed by name", function() {
        var savedPlayer;
        game.addPlayer(player);
        savedPlayer = game.getPlayer(player.name);
        return expect(savedPlayer).toEqual(player);
      });
      it("can be saved", function() {
        var players;
        game.addPlayer(player);
        players = game.getPlayers();
        return expect(players[0]).toEqual(player);
      });
      it("can move north", function() {
        var line;
        game.openBlocks(line = {
          pos: 3,
          axis: "y"
        });
        game.addPlayer(player);
        game.movePlayer(player.name, "up");
        return expect(player.pos.y).toBe(4);
      });
      it("can move west", function() {
        var line;
        game.openBlocks(line = {
          pos: 3,
          axis: "x"
        });
        game.addPlayer(player);
        game.movePlayer(player.name, "left");
        return expect(player.pos.x).toBe(2);
      });
      return describe("sight", function() {
        it("exits", function() {
          game.addPlayer(player);
          return expect(player.sight).toBeTruthy();
        });
        it("correct size", function() {
          game.addPlayer(player);
          return expect(player.sight.length).toBe(game.getSize());
        });
        it("maximum X", function() {
          var cell, j, len, line, ref, results;
          game.openBlocks(line = {
            pos: player.pos.x,
            axis: "y"
          });
          game.addPlayer(player);
          ref = player.sight[player.pos.x];
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            cell = ref[j];
            results.push(expect(cell).toBeTruthy());
          }
          return results;
        });
        it("maximum Y", function() {
          var cell, i, j, line, ref, results;
          game.openBlocks(line = {
            pos: player.pos.y,
            axis: "x"
          });
          game.addPlayer(player);
          results = [];
          for (i = j = 0, ref = game.getSize() - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            cell = player.sight[i][player.pos.x];
            results.push(expect(cell).toBeTruthy());
          }
          return results;
        });
        it("is restricted", function() {
          var cell, i, j, line, ref, results;
          game.openBlocks(line = {
            pos: 3,
            axis: "y"
          });
          game.openBlocks(line = {
            pos: player.pos.y,
            axis: "x"
          });
          player.pos.x = 0;
          game.addPlayer(player);
          results = [];
          for (i = j = 0, ref = game.getSize() - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            cell = player.sight[3][i];
            if (player.pos.y === i) {
              results.push(expect(cell).toBeTruthy());
            } else {
              results.push(expect(cell).toBeFalsy());
            }
          }
          return results;
        });
        return it("is restricted with wall", function() {
          var cell, end, i, j, line, ref, results, start;
          game.openBlocks(line = {
            pos: player.pos.x,
            axis: "y"
          }, start = 4);
          game.openBlocks(line = {
            pos: player.pos.x,
            axis: "y"
          }, start = 0, end = 1);
          game.openBlocks(line = {
            pos: player.pos.y,
            axis: "x"
          });
          game.addPlayer(player);
          results = [];
          for (i = j = 0, ref = game.getSize() - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            cell = player.sight[player.pos.x][i];
            if (player.pos.y <= i) {
              results.push(expect(cell).toBeTruthy());
            } else {
              results.push(expect(cell).toBeFalsy());
            }
          }
          return results;
        });
      });
    });
    return describe("blocks behaviors ", function() {
      describe("specified", function() {
        var block;
        block = 0;
        beforeEach(function() {
          return block = {
            start: 0,
            end: 6,
            line: {
              pos: 3
            }
          };
        });
        it("in X axis", function() {
          var open;
          block.line.axis = "x";
          game.openBlocks(block.line, block.start, block.end);
          open = game.isBlockOpen(6, 3);
          return expect(open).toBeTruthy();
        });
        return it("in Y axis", function() {
          var open;
          block.line.axis = "y";
          game.openBlocks(block.line, block.start, block.end);
          open = game.isBlockOpen(3, 6);
          return expect(open).toBeTruthy();
        });
      });
      return describe("defaults", function() {
        it("in X axis", function() {
          var line, open;
          game.openBlocks(line = {
            pos: 3,
            axis: "x"
          });
          open = game.isBlockOpen(6, 3);
          return expect(open).toBeTruthy();
        });
        return xit("in Y axis", function() {
          var line, open;
          game.openBlocks(line = {
            pos: 3,
            axis: "y"
          });
          open = game.isBlockOpen(3, 6);
          return expect(open).toBeTruthy();
        });
      });
    });
  });

}).call(this);
